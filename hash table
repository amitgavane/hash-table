#include <iostream>
#include <vector>
#include <list>
#include <algorithm> // Include for std::find
using namespace std;

class HashTableChaining {
private:
    vector<list<int>> table;
    int capacity;

    int hashFunction(int key) {
        return key % capacity; // Hash function
    }

public:
    HashTableChaining(int size) : capacity(size), table(size) {}

    void insert(int key) {
        int index = hashFunction(key);
        table[index].push_back(key);
        cout << key << " inserted into the hash table.\n";
    }

    void remove(int key) {
        int index = hashFunction(key);
        auto& chain = table[index]; // Reference to the list at index
        auto it = std::find(chain.begin(), chain.end(), key); // Use std::find explicitly
        if (it != chain.end()) {
            chain.erase(it);
            cout << key << " removed from the hash table.\n";
        } else {
            cout << key << " not found in the hash table.\n";
        }
    }

    void display() {
        for (int i = 0; i < capacity; i++) {
            cout << "Bucket " << i << ":";
            for (int key : table[i]) {
                cout << " " << key;
            }
            cout << "\n";
        }
    }
};

// Main function for testing
int main() {
    int size, choice, key;
    cout << "Enter the size of the hash table: ";
    cin >> size;

    HashTableChaining hashTable(size);

    do {
        cout << "\nMenu:\n1. Insert\n2. Remove\n3. Display\n4. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter key to insert: ";
                cin >> key;
                hashTable.insert(key);
                break;
            case 2:
                cout << "Enter key to remove: ";
                cin >> key;
                hashTable.remove(key);
                break;
            case 3:
                hashTable.display();
                break;
            case 4:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 4);

    return 0;
}
